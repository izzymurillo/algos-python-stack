/* 
Array: Mode

Create a function that, given an array of ints,
returns the int that occurs most frequently in the array.
What if there are multiple items that occur the same number of time?
    - return all of them (in an array)
    - what if all items occur the same number of times?
- return empty array
*/

const nums1 = [];
const expected1 = [];

const nums2 = [1];
const expected2 = [1];

const nums3 = [5, 1, 4];
const expected3 = [];

const nums4 = [5, 1, 4, 1];
const expected4 = [1];

const nums5 = [5, 1, 4, 1, 5];
const expected5 = [5, 1];

const nums6 = [1,4,3,2,1,1,1,5,5,5,7,8,4,8,4,4]
const expected6 = [1,4]

const nums7 = [1,2,3,1,2,3,1,2,3]
const expected7 = []

//  - order doesn't matter

/**
 * Finds the mode or all modes if there are more than one. The mode is the
 *    value which occurs the most times in the given array.
 * - Time: O(?).
 * - Space: O(?).
 * @param {Array<number>} nums Test
 * @returns {Array<number>} Mode or modes in any order.
 */
// function mode(nums) {
//     var expected = []
//     var hashmap = {}
//     for (var i = 0; i < nums.length; i++) {
//         if (nums[i] in hashmap) {
//             hashmap[nums[i]] += 1;
//         }
//         else {
//             hashmap[nums[i]] = 1;
//         }
//     }
//     console.log(hashmap)
//     var max = 0
//     for (key in hashmap) {
//         if (hashmap[key] > max) {
//             max = hashmap[key];
//             expected = []
//             expected.push(key);
//         }
//         else if (hashmap[key] == max) {
//             expected.push(key);
//         }
//     }
//     if (expected.length == hashmap.length) {
//         expected = [];
//     }
//     return expected
// }

// function mode(nums) {
//     let newArray = []
//     let map = {}

//     for(let i =0; i < nums.length;i++){
//         if(nums[i] in map) {
//             map[nums[i]]++
//         }
//         else{
//             map[nums[i]] = 1
//         }
//     }
//     let maxNum = 0;
//     for (item in map) {
//         if(map[item] > maxNum) {
//             maxNum = map[item]
//         }
//     }

//     for(item in map) {
//         if(map[item] === maxNum) {
//             newArray.push(parseInt(item))
//         }
//     }

//     return newArray

// }

function mode(nums) {
    if(nums.length <= 1) return nums;
    var dictionary = {};
    var final = [];
    for(var i = 0; i < nums.length; i++){
        if (nums[i] in dictionary){
            dictionary[nums[i]] += 1;
        }
        else {
            dictionary[nums[i]] = 1;
        }
    }
    var totals = Math.max(...Object.values(dictionary));
    var objLength = 0;
    for(key in dictionary){
        objLength++;
        if(dictionary[key] == totals){
            final.push(parseInt(key));
        }
    }
    if(final.length == objLength && objLength > 1){
        return [];
    }
    else{
        return final;
    }
}



mode(nums1);
mode(nums2);
mode(nums3);
mode(nums4);
mode(nums5);
mode(nums6);
mode(nums7);
